{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"assembly":"    /* \"Contest.sol\":481:1452  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Contest.sol\":481:1452  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220953af9a15613c51e13847c2e9cd80bbe3f2dff8e1548feef6515d585421eae6064736f6c63430008090033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220953af9a15613c51e13847c2e9cd80bbe3f2dff8e1548feef6515d585421eae6064736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 GASPRICE 0xF9 LOG1 JUMP SGT 0xC5 0x1E SGT DUP5 PUSH29 0x2E9CD80BBE3F2DFF8E1548FEEF6515D585421EAE6064736F6C63430008 MULMOD STOP CALLER ","sourceMap":"481:971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220953af9a15613c51e13847c2e9cd80bbe3f2dff8e1548feef6515d585421eae6064736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 GASPRICE 0xF9 LOG1 JUMP SGT 0xC5 0x1E SGT DUP5 PUSH29 0x2E9CD80BBE3F2DFF8E1548FEEF6515D585421EAE6064736F6C63430008 MULMOD STOP CALLER ","sourceMap":"481:971:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"legacyAssembly":{".code":[{"begin":481,"end":1452,"name":"PUSH #[$]","source":0,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH [$]","source":0,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"B"},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"CODECOPY","source":0},{"begin":481,"end":1452,"name":"DUP1","source":0},{"begin":481,"end":1452,"name":"MLOAD","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"BYTE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"73"},{"begin":481,"end":1452,"name":"EQ","source":0},{"begin":481,"end":1452,"name":"PUSH [tag]","source":0,"value":"1"},{"begin":481,"end":1452,"name":"JUMPI","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"4E487B7100000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"4"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"24"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"REVERT","source":0},{"begin":481,"end":1452,"name":"tag","source":0,"value":"1"},{"begin":481,"end":1452,"name":"JUMPDEST","source":0},{"begin":481,"end":1452,"name":"ADDRESS","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"73"},{"begin":481,"end":1452,"name":"DUP2","source":0},{"begin":481,"end":1452,"name":"MSTORE8","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP2","source":0},{"begin":481,"end":1452,"name":"RETURN","source":0}],".data":{"0":{".auxdata":"a2646970667358221220953af9a15613c51e13847c2e9cd80bbe3f2dff8e1548feef6515d585421eae6064736f6c63430008090033",".code":[{"begin":481,"end":1452,"name":"PUSHDEPLOYADDRESS","source":0},{"begin":481,"end":1452,"name":"ADDRESS","source":0},{"begin":481,"end":1452,"name":"EQ","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"80"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"40"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"DUP1","source":0},{"begin":481,"end":1452,"name":"REVERT","source":0}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contest.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Contest.sol\":{\"keccak256\":\"0x3582df3e5ca968b331951178c8bc130de57a70219ba5b5fc17a004b44e4c524a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f89f98d0c2f38f320415994cf3a57f56350dad0b64956bdea650e788d62fcaec\",\"dweb:/ipfs/QmcAzH4CRRqAHJGPTyjoQ7jV9CbFsVtJ79ARZxFuw3ZPGz\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
