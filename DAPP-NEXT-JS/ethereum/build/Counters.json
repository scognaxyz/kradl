{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"assembly":"    /* \"Contest.sol\":481:1452  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"Contest.sol\":481:1452  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122036c49b6d91155ac41d48ad96fd752eff921b5c390c8217815353c16d56a3394064736f6c63430008090033\n}\n","bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036c49b6d91155ac41d48ad96fd752eff921b5c390c8217815353c16d56a3394064736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xC4 SWAP12 PUSH14 0x91155AC41D48AD96FD752EFF921B 0x5C CODECOPY 0xC DUP3 OR DUP2 MSTORE8 MSTORE8 0xC1 PUSH14 0x56A3394064736F6C634300080900 CALLER ","sourceMap":"481:971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036c49b6d91155ac41d48ad96fd752eff921b5c390c8217815353c16d56a3394064736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xC4 SWAP12 PUSH14 0x91155AC41D48AD96FD752EFF921B 0x5C CODECOPY 0xC DUP3 OR DUP2 MSTORE8 MSTORE8 0xC1 PUSH14 0x56A3394064736F6C634300080900 CALLER ","sourceMap":"481:971:0:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"legacyAssembly":{".code":[{"begin":481,"end":1452,"name":"PUSH #[$]","source":0,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH [$]","source":0,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"B"},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"CODECOPY","source":0},{"begin":481,"end":1452,"name":"DUP1","source":0},{"begin":481,"end":1452,"name":"MLOAD","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"BYTE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"73"},{"begin":481,"end":1452,"name":"EQ","source":0},{"begin":481,"end":1452,"name":"PUSH [tag]","source":0,"value":"1"},{"begin":481,"end":1452,"name":"JUMPI","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"4E487B7100000000000000000000000000000000000000000000000000000000"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"4"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"24"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"REVERT","source":0},{"begin":481,"end":1452,"name":"tag","source":0,"value":"1"},{"begin":481,"end":1452,"name":"JUMPDEST","source":0},{"begin":481,"end":1452,"name":"ADDRESS","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"73"},{"begin":481,"end":1452,"name":"DUP2","source":0},{"begin":481,"end":1452,"name":"MSTORE8","source":0},{"begin":481,"end":1452,"name":"DUP3","source":0},{"begin":481,"end":1452,"name":"DUP2","source":0},{"begin":481,"end":1452,"name":"RETURN","source":0}],".data":{"0":{".auxdata":"a264697066735822122036c49b6d91155ac41d48ad96fd752eff921b5c390c8217815353c16d56a3394064736f6c63430008090033",".code":[{"begin":481,"end":1452,"name":"PUSHDEPLOYADDRESS","source":0},{"begin":481,"end":1452,"name":"ADDRESS","source":0},{"begin":481,"end":1452,"name":"EQ","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"80"},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"40"},{"begin":481,"end":1452,"name":"MSTORE","source":0},{"begin":481,"end":1452,"name":"PUSH","source":0,"value":"0"},{"begin":481,"end":1452,"name":"DUP1","source":0},{"begin":481,"end":1452,"name":"REVERT","source":0}]}}},"methodIdentifiers":{}},"ewasm":{"wasm":""},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contest.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Contest.sol\":{\"keccak256\":\"0xccfe01aa9e55542aab73bc796053675a3ff585a8996c40e10a3638d96bc832da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://193804da2751e4da721803f75823de2b186aa313d1589001511b4a81fa7f8795\",\"dweb:/ipfs/QmXbaZTBB38w8P7dDTvmf65iZy5YtxVp8WDEQ66xfFJe6T\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}
